basePath: /
definitions:
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.RequestEmailVerification:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  dto.ResetPasswordRequest:
    properties:
      new_password:
        minLength: 6
        type: string
      token:
        type: string
    required:
    - new_password
    - token
    type: object
  dto.ResetRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  dto.UpdateRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - username
    type: object
host: localhost:3000
info:
  contact: {}
  description: A simple Task Manager API using Fiber and Swagger implemeneted in Go
  title: Taskinator API
  version: "1.0"
paths:
  /api/login:
    post:
      consumes:
      - application/json
      description: 'LoginUser handles user authentication: Logs in a user and returns
        a JWT token'
      parameters:
      - description: Login Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token response
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User Login
      tags:
      - Authentication
  /api/register:
    post:
      consumes:
      - application/json
      description: 'RegisterUser handles user registration: Creates a new user and
        returns a success message or an error.'
      parameters:
      - description: User registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User successfully registered
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User Registration
      tags:
      - Registration
  /user/admin/delete-user/:id:
    delete:
      description: DeleteUserProfile Removes the authenticated user's profile if JWT
        is valid
      produces:
      - application/json
      responses:
        "200":
          description: Profile deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete user profile
      tags:
      - Delete Profile
  /user/email/verify:
    get:
      consumes:
      - application/json
      description: Confirms the user's email verification
      parameters:
      - description: Verification Token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Email verified successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid or expired token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Verify Email
      tags:
      - Email Verification
  /user/email/verify/request:
    post:
      consumes:
      - application/json
      description: Sends an email with a verification link to the user
      parameters:
      - description: Email verification request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RequestEmailVerification'
      produces:
      - application/json
      responses:
        "200":
          description: Verification email sent successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Request Email Verification
      tags:
      - Email Verification
  /user/password-reset/confirm:
    post:
      consumes:
      - application/json
      description: Verifies reset token and updates user password
      parameters:
      - description: New password and token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successful
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid or expired token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Reset User Password
      tags:
      - Authentication
  /user/password-reset/request:
    post:
      consumes:
      - application/json
      description: Sends a password reset link to the user's email
      parameters:
      - description: User email for password reset
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset link sent
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Request Password Reset
      tags:
      - Authentication
  /user/profile:
    get:
      description: Returns the currently logged-in user's profile if JWT is valid
      produces:
      - application/json
      responses:
        "200":
          description: User profile
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - Profile
  /user/update:
    put:
      consumes:
      - application/json
      description: UpdateUserProfile updates the authenticated user's profile if JWT
        is valid
      parameters:
      - description: Update Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Profile Updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - Update Profile
schemes:
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
